'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ajaxQueue = require('@butsandcats/ajax-queue');

var _ajaxQueue2 = _interopRequireDefault(_ajaxQueue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cart = function () {
  function Cart() {
    var _this = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Cart);

    // Check each of the parameters exist and assign them to their default type if not.
    var _config$cart = config.cart,
        cart = _config$cart === undefined ? {} : _config$cart,
        _config$selectors = config.selectors,
        selectors = _config$selectors === undefined ? {} : _config$selectors,
        _config$options = config.options,
        options = _config$options === undefined ? {} : _config$options;

    // Define the default selectors and options for the class

    var defaultSelectors = {
      decreaseQuantity: '[data-minus-one]',
      increaseQuantity: '[data-plus-one]',
      addItem: '[data-add-to-cart]',
      quickAdd: '[data-quick-add]',
      quickAddQuantity: '[data-quick-add-qty]',
      quickAddProperties: '[data-quick-add-properties]',
      removeItem: '[data-remove-item]'
      // This object will be used to define default callbacks, money formatting and other options
    };var defaultOptions = {
      getUrl: '/cart.json',
      timeOut: 1000

      // Create a new queue
    };this.queue = new _ajaxQueue2.default({
      method: 'POST',
      completedAllRequestsEvent: 'cart:requestsCompleted',
      completedRequestEvent: 'cart:requestCompleted'
    });

    this.defaultBeforeSend = function (type, item) {
      var response = {
        type: type,
        item: item
      };
      var sendEvent = new CustomEvent('cart:sending', {
        detail: {
          response: response
        }
      });
      document.dispatchEvent(sendEvent);
      return response;
    };

    this.defaultSuccess = function (response) {
      _this.getCart();
    };

    this.defaultError = function (resp) {
      var response = JSON.parse(resp);
      var errorEvent = new CustomEvent('cart:error', {
        detail: {
          response: response
        }
      });

      _this.preparingItemsArray = _this.createItemArray();
      document.dispatchEvent(errorEvent);
      return response;
    };

    // Merge and add the settings into the prototype
    this.cart = cart;
    // Keep track of items in an id centric structure
    this.items = this.createItems(cart);
    this.selectors = Object.assign(defaultSelectors, selectors);
    this.options = Object.assign(defaultOptions, options);

    // Debounce requests
    this.requestTimeout = null;
    this.preparingItemsArray = null;

    // Build the event listeners from the selectors
    this.buildEventListeners(this.selectors);
    return this;
  }

  _createClass(Cart, [{
    key: 'buildEventListeners',
    value: function buildEventListeners(selectors) {
      var _this2 = this;

      this.allSelectors = {
        addItem: {
          selector: selectors.addItem,
          listen: 'click',
          callback: function callback() {
            return _this2.addToCart;
          }
        },
        removeItemSelectors: {
          selector: selectors.removeItem,
          listen: 'click',
          callback: function callback() {
            return _this2.removeFromCart;
          }
        },
        decreaseQuantitySelectors: {
          selector: selectors.decreaseQuantity,
          listen: 'click',
          callback: function callback() {
            return _this2.decreaseQuantity;
          }
        },
        increaseQuantitySelectors: {
          selector: selectors.increaseQuantity,
          listen: 'click',
          callback: function callback() {
            return _this2.increaseQuantity;
          }
        },
        quickAddSelectors: {
          selector: selectors.quickAdd,
          listen: 'click',
          callback: function callback() {
            return _this2.quickAdd;
          }
        }
      };

      function on(eventName, selector, fn) {
        document.addEventListener(eventName, function (event) {
          var possibleTargets = document.querySelectorAll(selector);
          var target = event.target;
          for (var i = 0, l = possibleTargets.length; i < l; i++) {
            var el = target;
            var p = possibleTargets[i];

            while (el && el !== document) {
              if (el === p) {
                event.preventDefault();
                event.elem = p;
                return fn.call(p, event);
              }

              el = el.parentNode;
            }
          }
        });
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.keys(this.allSelectors)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;
          var _allSelectors$key = this.allSelectors[key],
              listen = _allSelectors$key.listen,
              selector = _allSelectors$key.selector,
              callback = _allSelectors$key.callback;

          on(listen, selector, callback);
        }
        // return this to and the ability to chain functions
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }, {
    key: 'addToCart',
    value: function addToCart(event) {
      var idInput = document.querySelector('[name=id]');
      var quantityInput = document.querySelector('[name=quantity]');
      var propertyInputs = document.querySelectorAll('[name*=properties]');

      var id = Number(idInput.value || idInput.options[idInput.selectedIndex].value);
      var quantity = Number(quantityInput.value);
      var properties = {};

      // Create an object of properties from the properties input fields
      for (var input = 0; input < propertyInputs.length; input += 1) {
        var element = propertyInputs[input];
        if (element.type === 'radio' && !element.checked) {
          continue;
        }
        var key = element.getAttribute('name').split('[')[1].split(']')[0];
        var value = element.value;
        properties[key] = value;
      }
      var data = {
        id: id,
        quantity: quantity,
        properties: properties
      };
      this.addItem(data);
    }
  }, {
    key: 'quickAdd',
    value: function quickAdd(event) {
      var idAttribute = this.getDataAttribute(this.selectors.quickAdd);
      var qtyAttribute = this.getDataAttribute(this.selectors.quickAddQuantity);
      var propertiesAttribute = this.getDataAttribute(this.selectors.quickAddProperties);
      var id = Number(event.elem.getAttribute(idAttribute));
      var quantity = Number(event.elem.getAttribute(qtyAttribute)) || 1;
      var properties = JSON.parse(event.elem.getAttribute(propertiesAttribute));
      var data = {
        id: id,
        quantity: quantity,
        properties: properties
      };
      var config = {
        beforeRequestType: 'quickAdd'
      };
      this.addItem(data, config);
    }
  }, {
    key: 'removeFromCart',
    value: function removeFromCart(event) {
      var attribute = this.getDataAttribute(this.selectors.removeItem);
      var line = Number(event.elem.getAttribute(attribute));
      this.removeItemByLine(line);
    }
  }, {
    key: 'decreaseQuantity',
    value: function decreaseQuantity(event) {
      var attribute = this.getDataAttribute(this.selectors.decreaseQuantity);
      var line = Number(event.elem.getAttribute(attribute));
      var index = line - 1;
      var quantity = this.cart.items[index].quantity - 1;
      var config = {
        beforeRequestType: 'decreaseQuantity'
      };
      this.updateItemByLine(line, quantity, config);
    }
  }, {
    key: 'increaseQuantity',
    value: function increaseQuantity(event) {
      var attribute = this.getDataAttribute(this.selectors.increaseQuantity);
      var line = Number(event.elem.getAttribute(attribute));
      var index = line - 1;
      var quantity = this.cart.items[index].quantity + 1;
      var config = {
        beforeRequestType: 'increaseQuantity'
      };
      this.updateItemByLine(line, quantity, config);
    }
  }, {
    key: 'getCart',
    value: function getCart() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.success = options.success || function (response) {
        var cart = JSON.parse(response);
        this.cart = cart;
        var updateEvent = new CustomEvent('cart:updated', {
          detail: {
            response: cart
          }
        });
        document.dispatchEvent(updateEvent);
        return this.cart;
      };
      options.error = options.error || this.defaultError;

      var request = {
        url: this.options.getUrl,
        method: 'GET',
        success: options.success,
        error: options.error
        // Add the request to the ajax request queue
      };this.queue.add(request);
    }
  }, {
    key: 'addItem',
    value: function addItem() {
      var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (item.id === undefined) {
        return false;
      }
      item.quantity = item.quantity || 1;
      item.properties = item.properties || {};

      // Define callback functions for after the ajax request has been completed
      options.beforeRequestType = options.beforeRequestType || 'addItem';
      options.beforeSend = options.beforeSend || this.defaultBeforeSend;
      options.success = options.success || function (lineItem) {
        var _this3 = this;

        var item = JSON.parse(lineItem);
        this.getCart({
          success: function success(response) {
            var cart = JSON.parse(response);
            var addedEvent = new CustomEvent('cart:itemAdded', {
              detail: {
                response: {
                  item: item,
                  cart: cart
                }
              }
            });
            _this3.preparingItemsArray = _this3.createItemArray();
            document.dispatchEvent(addedEvent);
          }
        });
      };
      options.error = options.error || this.defaultError;

      // Build the ajax request
      var request = {
        url: '/cart/add.js',
        data: item,
        success: options.success,
        error: options.error

        // Send a beforeSend event and dd the request to the ajax request queue
      };options.beforeSend(options.beforeRequestType, item.id);
      this.queue.add(request);
      return this;
    }
  }, {
    key: 'removeItemById',
    value: function removeItemById(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var data = {
        updates: {}
      };

      data.updates[id] = 0;

      options.beforeRequestType = options.beforeRequestType || 'removeItemById';
      options.beforeSend = options.beforeSend || this.defaultBeforeSend;
      options.success = options.success || this.defaultSuccess;
      options.error = options.error || this.defaultError;

      var request = {
        url: '/cart/update.js',
        data: data,
        error: options.error,
        success: options.success
      };

      options.beforeSend(options.beforeRequestType, id);
      this.queue.add(request);
      return this;
    }
  }, {
    key: 'removeItemByLine',
    value: function removeItemByLine(line) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      options.beforeRequestType = options.beforeRequestType || 'removeItemByLine';
      options.beforeSend = options.beforeSend || this.defaultBeforeSend;
      options.success = options.success || this.defaultSuccess;
      options.error = options.error || this.defaultError;

      var request = {
        url: '/cart/change.js',
        data: {
          line: line,
          quantity: 0
        },
        success: options.success,
        error: options.error
      };

      options.beforeSend(options.beforeRequestType, line);
      this.queue.add(request);
      return this;
    }
  }, {
    key: 'updateItemById',
    value: function updateItemById(id, quantity) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var data = {
        updates: {}
      };

      data.updates[id] = quantity;

      options.beforeRequestType = options.beforeRequestType || 'updateItemById';
      options.beforeSend = options.beforeSend || this.defaultBeforeSend;
      options.success = options.success || this.defaultSuccess;
      options.error = options.error || this.defaultError;
      var request = {
        url: '/cart/update.js',
        data: data,
        error: options.error,
        success: options.success
      };

      options.beforeSend(options.beforeRequestType, id);
      this.queue.add(request);
      return this;
    }
  }, {
    key: 'updateItemByLine',
    value: function updateItemByLine(line) {
      var _this4 = this;

      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var config = arguments[2];

      clearTimeout(this.requestTimeout);
      this.preparingItemsArray = this.preparingItemsArray || this.createItemArray();
      this.preparingItemsArray[line - 1] = quantity;
      var sendRequest = function sendRequest() {
        var options = config || {};
        options.beforeRequestType = options.beforeRequestType || 'updateItemByLine';
        options.beforeSend = options.beforeSend || _this4.defaultBeforeSend;
        options.success = options.success || _this4.defaultSuccess;
        options.error = options.error || _this4.defaultError;

        var updates = _this4.preparingItemsArray;
        var request = {
          url: '/cart/update.js',
          data: {
            updates: updates
          },
          success: options.success,
          error: options.error
        };

        options.beforeSend(options.beforeRequestType, line);
        _this4.queue.add(request);
        var newArray = [];
        for (var i = 0; i < _this4.preparingItemsArray.length; i += 1) {
          if (_this4.preparingItemsArray[i] > 0) {
            newArray.push(_this4.preparingItemsArray[i]);
          }
        }
        _this4.preparingItemsArray = newArray;
      };

      this.requestTimeout = setTimeout(sendRequest, this.options.timeOut);

      return this;
    }
  }, {
    key: 'changeItemByLine',
    value: function changeItemByLine(line, quantity) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options.beforeRequestType = options.beforeRequestType || 'changeItemByLine';
      options.beforeSend = options.beforeSend || this.defaultBeforeSend;
      options.success = options.success || this.defaultSuccess;
      options.error = options.error || this.defaultError;
      var data = {
        line: line,
        quantity: quantity
      };

      if (options.properties !== undefined) {
        data.properties = options.properties;
      }

      var request = {
        url: '/cart/change.js',
        data: data,
        success: options.success,
        error: options.error
      };

      options.beforeSend(options.beforeRequestType, data);
      this.queue.add(request);
      return this;
    }
  }, {
    key: 'getShippingRates',
    value: function getShippingRates() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.success = options.success || this.defaultSuccess;
      options.error = options.error || this.defaultError;
      var request = {
        url: '/cart/shipping_rates.json?' + options.data,
        method: 'GET',
        success: options.success,
        error: options.error
      };
      this.queue.add(request);
      return this;
    }
  }, {
    key: 'setAttributes',
    value: function setAttributes() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.beforeRequestType = options.beforeRequestType || 'setAttributes';
      options.beforeSend = options.beforeSend || this.defaultBeforeSend;
      options.success = options.success || this.defaultSuccess;
      options.error = options.error || this.defaultError;
      var attributes = options.attributes || {};
      var data = {
        attributes: attributes
      };
      var request = {
        url: '/cart/update.js',
        success: options.success,
        error: options.error,
        data: data
      };

      if (attributes !== {}) {
        options.beforeSend(options.beforeRequestType, data);
        this.queue.add(request);
      }
      return this;
    }
  }, {
    key: 'setNote',
    value: function setNote() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.beforeRequestType = options.beforeRequestType || 'setNote';
      options.beforeSend = options.beforeSend || this.defaultBeforeSend;
      options.success = options.success || this.defaultSuccess;
      options.error = options.error || this.defaultError;
      var note = options.note || null;
      var data = {
        note: note
      };
      var request = {
        url: '/cart/update.js',
        success: options.success,
        error: options.error,
        data: data
      };
      options.beforeSend(options.beforeRequestType, data);
      this.queue.add(request);
      return this;
    }
  }, {
    key: 'getDataAttribute',
    value: function getDataAttribute(selector) {
      return selector.replace('[', '').replace(']', '');
    }
  }, {
    key: 'createItems',
    value: function createItems(cart) {
      var items = {};
      for (var i = 0; i < cart.items.length; i++) {
        items[cart.items[i].id] = {
          line: i + 1,
          quantity: cart.items[i].quantity,
          key: cart.items[i].key
        };
      }
      return items;
    }
  }, {
    key: 'createItemArray',
    value: function createItemArray(cartObj) {
      var array = [];
      var cart = cartObj || this.cart;
      for (var i = 0; i < cart.items.length; i++) {
        array.push(cart.items[i].quantity);
      }
      return array;
    }
  }]);

  return Cart;
}();

exports.default = Cart;